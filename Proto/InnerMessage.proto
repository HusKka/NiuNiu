	/// <summary>
	/// 传送unit
	/// </summary>
	message M2M_TrasferUnitRequest // IRequest
	{
		required Unit Unit = 1;
	}
	
	message M2M_TrasferUnitResponse // IResponse
	{
	}
	
	message M2A_Reload // IRequest
	{
	}

	message A2M_Reload // IResponse
	{
	}

	message G2G_LockRequest // IRequest
	{
		required int64 Id = 1;
		required string Address = 2;
	}

	message G2G_LockResponse // IResponse
	{
	}

	message G2G_LockReleaseRequest // IRequest
	{
		required int64 Id = 1;
		required string Address = 2;
	}

	message G2G_LockReleaseResponse // IResponse
	{
	}

	message DBSaveRequest // IRequest
	{
		required bool NeedCache = 1;

		required string CollectionName = 2;

		required ComponentWithId Component = 3;
	}


	message DBSaveBatchResponse // IResponse
	{
	}

	message DBSaveBatchRequest // IRequest
	{
		required bool NeedCache = 1;
		required string CollectionName = 2;
		repeated ComponentWithId Components = 3;
	}

	message DBSaveResponse // IResponse
	{
	}

	message DBQueryRequest // IRequest
	{
		required int64 Id = 1;
		required string CollectionName = 2;
		required bool NeedCache = 3;
	}

	message DBQueryResponse // IResponse
	{
		required ComponentWithId Component = 1;
	}

	message DBQueryBatchRequest // IRequest
	{
		required string CollectionName = 1;
		repeated int64 IdList = 2;
		required bool NeedCache = 3;
	}

	message DBQueryBatchResponse // IResponse
	{
		repeated ComponentWithId Components = 1;
	}

	message DBQueryJsonRequest // IRequest
	{
		required string CollectionName = 1;
		required string Json = 2;
	}

	message DBQueryJsonResponse // IResponse
	{
		repeated ComponentWithId Components = 1;
	}

	message ObjectAddRequest // IRequest
	{
		required int64 Key = 1;
		required int AppId = 2;
	}

	message ObjectAddResponse // IResponse
	{
	}

	message ObjectRemoveRequest // IRequest
	{
		required int64 Key = 1;
	}

	message ObjectRemoveResponse // IResponse
	{
	}

	message ObjectLockRequest // IRequest
	{
		required int64 Key = 1;
		required int LockAppId = 2;
		required int Time = 3;
	}

	message ObjectLockResponse // IResponse
	{
	}

	message ObjectUnLockRequest // IRequest
	{
		required int64 Key = 1;
		required int UnLockAppId = 2;
		required int AppId = 3;
	}

	message ObjectUnLockResponse // IResponse
	{
	}

	message ObjectGetRequest // IRequest
	{
		required int64 Key = 1;
	}

	message ObjectGetResponse // IResponse
	{
		required int AppId = 1;
	}

	message R2G_GetLoginKey // IRequest
	{
		required int64 UserId = 1;
	}

	message G2R_GetLoginKey // IResponse
	{
		required int64 Key = 1;
	}

	message G2M_CreateUnit // IRequest
	{
		required int64 PlayerId = 1;
		required int64 GateSessionId = 2;
	}

	message M2G_CreateUnit // IResponse
	{
		required int64 UnitId = 1;
		required int Count = 2;
	}
	
	#region Realm-Gate
	
	message R2G_PlayerKickOut // IRequest
    {
        required long UserId = 1;
    }

    message G2R_PlayerKickOut // IResponse
    {
    }
	
	#endregion
	
	#region Gate-Realm
	
	message G2R_PlayerOnline // IRequest
    {
        required long UserId = 1;
        required int GateAppId = 2;
    }
	
	message R2G_PlayerOnline // IResponse
    {
    }
	
	message G2R_PlayerOffline // IRequest
    {
        required long UserID = 1;
    }
	
	message R2G_PlayerOffline // IResponse
    {
    }
	
	#endregion
	
	#region Gate-Match
	
	message G2M_PlayerEnterMatch // IRequest
    {
        required long PlayerID = 1;
        required long UserID = 2;
        required long SessionID = 3;
    }

    message M2G_PlayerEnterMatch // IResponse
    {
    }
	
	message G2M_PlayerExitMatch // IRequest
    {
        required long UserID = 1;
    }

    message M2G_PlayerExitMatch // IResponse
    {
    }
	
	#endregion
	
	#region Match-Gate
	
    message M2G_MatchSucess // IActorMessage
    {
        required long GamerID = 1;
    }

    #endregion
	
	#region Match-Map
	
	message MH2MP_CreateRoom // IRequest
    {
    }

    message MP2MH_CreateRoom // IResponse
    {
        required long RoomID = 1;
    }
	
	message MH2MP_PlayerEnterRoom // IActorRequest
    {
        required long PlayerID = 1;
        required long UserID = 2;
        required long SessionID = 3;
    }

    message MP2MH_PlayerEnterRoom // IActorResponse
    {
        required long GamerID = 1;
    }
	
	#endregion
	
	#region Map-Match
	
	message MP2MH_PlayerExitRoom // IRequest
    {
        required long RoomID = 1;
        required long UserID = 2;
    }
	
	message MH2MP_PlayerExitRoom // IResponse
    {
    }
	
	message MP2MH_SyncRoomState // IMessage
    {
        required long RoomID = 1;
        required RoomState State = 2;
    }
	
	#endregion
	
	#region Gate-Map

    message G2M_PlayerExitRoom // IActorRequest
    {
        required long UserID = 1;
    }

    message M2G_PlayerExitRoom // IActorResponse
    {
    }

    #endregion
}